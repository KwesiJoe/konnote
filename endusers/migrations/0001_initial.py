# -*- coding: utf-8 -*-
# Generated by Django 1.11.15 on 2018-12-11 12:56
from __future__ import unicode_literals

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_countries.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.ASCIIUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('website_url', models.TextField(blank=True, default='', null=True)),
                ('email', models.EmailField(blank=True, default='', max_length=100)),
                ('physical_address', models.CharField(blank=True, default='', max_length=100, null=True)),
                ('postal_code', models.CharField(blank=True, default='', max_length=6, validators=[django.core.validators.RegexValidator(message=b"Postal Code must be entered in the format: '00100'. Up to 6 digits allowed.", regex=b'^\\d{5,6}$')])),
                ('mobile', models.CharField(blank=True, max_length=17, validators=[django.core.validators.RegexValidator(message=b"Phone number must be entered in the format: '+254722722722'. Up to 15 digits allowed.", regex=b'^\\+?1?\\d{9,15}$')])),
                ('telephone', models.CharField(blank=True, max_length=17, validators=[django.core.validators.RegexValidator(message=b"Phone number must be entered in the format: '+254722722722'. Up to 15 digits allowed.", regex=b'^\\+?1?\\d{9,15}$')])),
                ('postal_address', models.CharField(blank=True, default='', max_length=6, validators=[django.core.validators.RegexValidator(message=b"Postal Code must be entered in the format: '00100'. Up to 6 digits allowed.", regex=b'^\\d{5,6}$')])),
                ('country', django_countries.fields.CountryField(blank=True, default='', max_length=2, null=True)),
                ('county', models.CharField(default='Nairobi', max_length=50)),
                ('bio', models.TextField(blank=True, max_length=250)),
                ('birth_date', models.DateField(blank=True, null=True)),
                ('gender', models.BooleanField(choices=[(0, b'Female'), (1, b'Male')], default=0)),
                ('email_verification_code', models.PositiveIntegerField(default=1234)),
                ('email_verification_generation_date', models.DateTimeField(auto_now=True)),
                ('email_verification_date', models.DateTimeField(auto_now=True)),
                ('mobile_verified', models.BooleanField(choices=[(0, b'Not Verified'), (1, b'Verified')], default=0)),
                ('mobile_verification_code', models.PositiveIntegerField(default=1234)),
                ('mobile_verification_generation_date', models.DateTimeField(auto_now=True)),
                ('mobile_verification_date', models.DateTimeField(auto_now=True)),
                ('email_verified', models.BooleanField(choices=[(0, b'Not Verified'), (1, b'Verified')], default=0)),
                ('date_created', models.DateTimeField(auto_now_add=True, null=True)),
                ('modified_date', models.DateTimeField(auto_now=True, null=True)),
                ('profilephoto', models.ImageField(blank=True, default='profiles/None/no-img.jpg', null=True, upload_to='static/profiles/')),
            ],
            options={
                'ordering': ['-last_name'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('is_customer', models.BooleanField(default=True, editable=False)),
                ('customer_type', models.CharField(choices=[(b'Visitor', b'Visitor'), (b'Prospect', b'Prospect'), (b'Activate User', b'Activate User'), (b'Paying Customer', b'Paying Customer'), (b'Repeat Customer', b'Repeat Customer')], default=0, max_length=20)),
                ('role', models.CharField(choices=[(b'CUST ADMIN', b'Customer Administrator'), (b'CUST STAFF', b'Customer Staff'), (b'CUSTOMER', b'Customer')], default=0, max_length=20)),
            ],
            options={
                'ordering': ['last_name'],
            },
            bases=('endusers.user',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Staff',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('is_konnote_staff', models.BooleanField(default=True, editable=False)),
                ('role', models.CharField(choices=[(b'ADMIN', b'Administrator'), (b'MANAGEMENT', b'Management'), (b'CUSTOMER CARE', b'Customer Care')], default=0, max_length=20)),
                ('supervisor', models.ForeignKey(blank=True, default='', null=True, on_delete=django.db.models.deletion.CASCADE, to='endusers.Staff')),
            ],
            options={
                'ordering': ['last_name'],
                'verbose_name_plural': 'Staff',
            },
            bases=('endusers.user',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.AddField(
            model_name='user',
            name='created_by',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
